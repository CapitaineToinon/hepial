import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.util.*;

action code {:
// jdjdjd
    
:}

terminal PRG, STARTPRG, ENDPRG, CONSTANT, SEMICOLON, STARTFUNC, ENDFUNC, OPENPARENT;
terminal CLOSEPARENT, COMMA, EQUAL, DOUBLEPOINTS, OPENBRACK, CLOSEBRACK;
terminal READ, WRITE, RETURN, IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE;
terminal FOR, FROM, TO, ENDFOR, TRUE, FALSE,  PLUS, MINUS, TIMES, DIVIDE;
terminal EQUALS, DIFF, INF, INFEQUAL, SUP, SUPEQUAL, AND, OR, TILDA, NOT;

terminal String IDENT, STRINGCONST, TINTEGER, TBOOLEAN;
terminal int INTEGERCONST;

// Non terminal rules that return a RESULT value
non terminal DeclarationProgramme program, header;
non terminal Bloc declar_lst, body;
non terminal ArrayList<Instruction> instr_lst, declars, declar, declar_var;
non terminal declar_const;
non terminal Expression expr, access, operand;
non terminal for_instr;
non terminal while_instr;
non terminal return_instr;
non terminal cond_instr;
non terminal write_instr;
non terminal read_instr;
non terminal Instruction instr;
non terminal Affectation assign;
non terminal index;
non terminal op_una;
non terminal Binaire op_bin;

non terminal l_ident;
non terminal type;
non terminal typebase;

// Precedences
precedence left PLUS, MINUS, TIMES, DIVIDE, EQUALS, DIFF;
precedence left INF, SUP, INFEQUAL, SUPEQUAL, AND, OR, DOUBLEPOINTS;
precedence right TILDA, NOT;

program           ::= header:p declar_lst STARTPRG body:instructions ENDPRG
                    {:
                      p.setInstructions(instructions);
                      System.out.println("ok, c'est good !!!!"); 
                      RESULT = p;
                    :};
header            ::= PRG IDENT:id {: RESULT = new DeclarationProgramme(new Idf(id, "", idleft, idright), "", idleft, idright); :};
declar_lst        ::=  declars {: :};
declars           ::= {: :}
                      | declars declar {: :};
declar            ::= declar_var {: :}
                      | declar_const {: :};
declar_var        ::= type l_ident SEMICOLON   {:  :};
l_ident           ::= IDENT {: :}
                      | l_ident COMMA IDENT {:   :};
type              ::= typebase {:   :};
typebase          ::= TINTEGER {:   :}
                      | TBOOLEAN {:   :};
declar_const      ::= CONSTANT type IDENT EQUAL expr SEMICOLON   {:   :};
expr              ::= expr:left op_bin:op expr:right
                      {:
                        // build binary expression
                        op.lierGauche(left);
                        op.lierDroit(right);
                        RESULT = op;  
                      :}
                      | op_una expr {:   :}
                      | OPENPARENT expr CLOSEPARENT {:   :}
                      | operand:operand             {:  RESULT = operand;  :};
op_bin            ::= PLUS:o       {: RESULT = new Addition("", oleft, oright); :}
                      | MINUS:o    {: RESULT = new Soustraction("", oleft, oright); :}
                      | TIMES:o    {: RESULT = new Produit("", oleft, oright); :}
                      | DIVIDE:o   {: RESULT = new Division("", oleft, oright); :}
                      | EQUALS:o   {: RESULT = new Egal("", oleft, oright); :} 
                      | DIFF:o     {: RESULT = new Diff("", oleft, oright); :}
                      | INF      {:   :}
                      | SUP      {:   :}
                      | INFEQUAL {:   :}
                      | SUPEQUAL {:   :}
                      | AND      {:   :}
                      | OR       {:   :};
op_una            ::= TILDA      {:   :}
                      | NOT      {:   :}
                      | MINUS    {:   :};
operand           ::= access:access       {: RESULT = access; :}
                      | INTEGERCONST:ib   {: RESULT = new Nombre(ib, "", ibleft, ibright); :}
                      | TRUE            {:   :}
                      | FALSE           {:   :};
access            ::= IDENT:id   {: RESULT = new Idf(id, "", idleft, idright); :};
body              ::= instr_lst:instructions {: RESULT = new Bloc(instructions, "", instructionsleft, instructionsright); :};
instr_lst         ::= {: RESULT = new ArrayList(); :}
                      | instr_lst:instructionList instr:instruction
                      {:
                        ArrayList<Instruction> instructions = new ArrayList<Instruction>(instructionList);
                        instructions.add(instruction);
                        RESULT = instructions;
                      :};
instr             ::= assign:inst         {: RESULT = inst; :}
                      | write_instr {:   :}
                      | read_instr  {:   :}
                      | cond_instr  {:   :}
                      | while_instr {:   :}
                      | for_instr   {:   :};
assign            ::= access:dest EQUAL:e expr:src SEMICOLON {: RESULT = new Affectation(dest, src, "", eleft, eright); :};
write_instr       ::= WRITE expr SEMICOLON {:   :}
                      | WRITE STRINGCONST SEMICOLON  {:   :};
read_instr        ::= READ IDENT SEMICOLON   {:   :};
cond_instr        ::= IF expr THEN body ELSE body ENDIF {:   :}
                      | IF expr THEN body ENDIF {:   :};
while_instr       ::= WHILE expr DO body ENDWHILE {:   :};
for_instr         ::= FOR IDENT FROM expr TO expr DO body ENDFOR {:   :};
