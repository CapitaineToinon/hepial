package hepial;

import hepial.*;
import hepial.ast.*;
import hepial.ast.exceptions.*;
import hepial.ast.expression.*;
import hepial.ast.expression.binaire.*;
import hepial.ast.expression.binaire.arithmetique.*;
import hepial.ast.expression.binaire.relation.*;
import hepial.ast.expression.unaire.*;
import hepial.ast.instruction.*;

import java.io.*;
import java.util.*;
import java.util.Arrays;
import java.util.AbstractMap.SimpleEntry;
import java.util.Vector;

import java_cup.runtime.*;

action code {:
  /**
   * @return the current file name from the parser
   */
  private String getFl() {
    return this.parser.getFl();
  }
:}

parser code {: 
  private String fl;

  public parser(java_cup.runtime.Scanner s, String fl) {
    this(s);
    this.fl = fl;
  }

  /**
   * @return the current file name
   */
  public String getFl() {
    return this.fl;
  }
:};

terminal PRG, STARTPRG, ENDPRG, CONSTANT, SEMICOLON, OPENPARENT,
  CLOSEPARENT, COMMA, EQUAL,
  READ, WRITE, IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE,
  FOR, FROM, TO, ENDFOR, TRUE, FALSE,  PLUS, MINUS, TIMES, DIVIDE,
  EQUALS, DIFF, INF, INFEQUAL, SUP, SUPEQUAL, AND, OR, NOT, UMINUS;

terminal String IDENT, STRINGCONST, TINTEGER, TBOOLEAN;
terminal int INTEGERCONST;

// Non terminal rules that return a RESULT value
non terminal DeclarationProgramme program, header;
non terminal Bloc declar_lst, body;
non terminal ArrayList<Instruction> instr_lst, declars;
non terminal Instruction declar;
non terminal DeclarationVariable declar_var;
non terminal DeclarationConstant declar_const;
non terminal Expression expr, operand;
non terminal Idf access;
non terminal Pour for_instr;
non terminal Tantque while_instr;
non terminal Condition cond_instr;
non terminal Ecrire write_instr;
non terminal Lire read_instr;
non terminal Instruction instr;
non terminal Affectation assign;
non terminal Unaire op_una;
non terminal Binaire op_bin;
non terminal ArrayList<Idf> l_ident;
non terminal Type type, typebase;

// Precedences
precedence left PLUS, MINUS, OR;
precedence left TIMES, DIVIDE, AND;
precedence left EQUALS, DIFF, INF, SUP, INFEQUAL, SUPEQUAL;
precedence right UMINUS, NOT;

program           ::= header:p declar_lst:decralations STARTPRG body:instructions ENDPRG
                      {:
                        p.setDeclarations(decralations);
                        p.setInstructions(instructions);
                        System.out.println("ok, c'est good !!!!"); 
                        RESULT = p;
                      :};

header            ::= PRG IDENT:id 
                      {: 
                        Idf idf = new Idf(id, getFl(), idleft, idright);
                        RESULT = new DeclarationProgramme(idf, getFl(), idleft, idright);
                      :};

declar_lst        ::= declars:decralations
                      {: RESULT = new Bloc(decralations, getFl(), decralationsleft, decralationsright); :};

declars           ::= {: RESULT = new ArrayList(); :}
                      | 
                      declars:declarationList declar:declaration
                      {: 
                        ArrayList<Instruction> declarations = new ArrayList<Instruction>(declarationList);
                        declarations.add(declaration);
                        RESULT = declarations;
                      :};

declar            ::= declar_var:d  
                      {: RESULT = d; :}
                      | 
                      declar_const:d
                      {: RESULT = d; :};

declar_var        ::= type:t l_ident:idfs SEMICOLON
                      {:
                        RESULT = new DeclarationVariable(t, idfs, getFl(), 0, 0);
                      :};

l_ident           ::= IDENT:id
                      {:
                        Idf idf = new Idf(id, getFl(), idleft, idright);
                        RESULT = new ArrayList<Idf>(List.of(idf));
                      :}
                      |
                      l_ident:idfs COMMA IDENT:id
                      {: 
                        Idf idf = new Idf(id, getFl(), idleft, idright);
                        idfs.add(idf);
                        RESULT = idfs;
                      :};

type              ::= typebase:t
                      {: RESULT = t; :};

typebase          ::= TINTEGER
                      {: RESULT = Type.Entier; :}
                      |
                      TBOOLEAN
                      {: RESULT = Type.Booleen; :};

declar_const      ::= CONSTANT type:t IDENT:id EQUAL expr:e SEMICOLON
                      {:
                        Idf idf = new Idf(id, getFl(), idleft, idright);
                        RESULT = new DeclarationConstant(t, idf, e, getFl(), 0, 0);
                      :};

expr              ::= expr:a PLUS expr:b
                      {:
                        Addition op = new Addition(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a MINUS expr:b
                      {:
                        Soustraction op = new Soustraction(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a TIMES expr:b
                      {:
                        Produit op = new Produit(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a DIVIDE expr:b
                      {:
                        Division op = new Division(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a EQUALS expr:b
                      {:
                        Egal op = new Egal(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a DIFF expr:b
                      {:
                        Diff op = new Diff(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a INF expr:b
                      {:
                        Inferieur op = new Inferieur(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a SUP expr:b
                      {:
                        Superieur op = new Superieur(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a INFEQUAL expr:b
                      {:
                        InfEgal op = new InfEgal(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a SUPEQUAL expr:b
                      {:
                        SupEgal op = new SupEgal(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a AND expr:b
                      {:
                        Et op = new Et(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      expr:a OR expr:b
                      {:
                        Ou op = new Ou(getFl(), aleft, aright);
                        op.LierGauche(a);
                        op.LierDroit(b);
                        RESULT = op;
                      :}
                      |
                      NOT:u expr:exp
                      {:
                        Non op = new Non(getFl(), uleft, uright);
                        op.lier(exp);
                        RESULT = op;
                      :}
                      | 
                      MINUS:u expr:exp
                      {:
                        Moins op = new Moins(getFl(), uleft, uright);
                        op.lier(exp);
                        RESULT = op;
                      :} 
                      %prec UMINUS
                      | 
                      OPENPARENT expr:e CLOSEPARENT
                      {: RESULT = new Parentheses(e, getFl(), eleft, eright); :}
                      | 
                      operand:operand
                      {: RESULT = operand; :};

operand           ::= access:access
                      {: RESULT = access; :}
                      |
                      INTEGERCONST:ib
                      {: RESULT = new Nombre(ib, getFl(), ibleft, ibright); :}
                      |
                      TRUE:ib
                      {: RESULT = new Vrai(getFl(), ibleft, ibright); :}
                      |
                      FALSE:ib
                      {: RESULT = new Faux(getFl(), ibleft, ibright); :};

access            ::= IDENT:id
                      {: RESULT = new Idf(id, getFl(), idleft, idright); :};

body              ::= instr_lst:instructions
                      {: RESULT = new Bloc(instructions, getFl(), instructionsleft, instructionsright); :};

instr_lst         ::= {: RESULT = new ArrayList(); :}
                      | 
                      instr_lst:instructionList instr:instruction
                      {:
                        ArrayList<Instruction> instructions = new ArrayList<Instruction>(instructionList);
                        instructions.add(instruction);
                        RESULT = instructions;
                      :};

instr             ::= assign:instr                  
                      {: RESULT = instr; :}
                      |
                      write_instr:instr           
                      {: RESULT = instr; :}
                      |
                      read_instr:instr               
                      {: RESULT = instr; :}
                      |
                      cond_instr:instr               
                      {: RESULT = instr; :}
                      |
                      while_instr:instr               
                      {: RESULT = instr; :}
                      |
                      for_instr:instr                 
                      {: RESULT = instr; :};

assign            ::= access:dest EQUAL:e expr:src SEMICOLON
                      {: RESULT = new Affectation(dest, src, getFl(), eleft, eright); :};

write_instr       ::= WRITE expr:e SEMICOLON
                      {: RESULT = new Ecrire(e, getFl(), eleft, eright); :}
                      | 
                      WRITE STRINGCONST:s SEMICOLON
                      {:
                        Chaine c = new Chaine(s, getFl(), sleft, sright);
                        RESULT = new Ecrire(c, getFl(), sleft, sright);
                      :};

read_instr        ::= READ IDENT:id SEMICOLON
                      {:
                        Idf idf = new Idf(id, getFl(), idleft, idright);
                        RESULT = new Lire(idf, getFl(), idleft, idright);
                      :};

cond_instr        ::= IF:f expr:expr THEN body:body_then ELSE body:body_else ENDIF
                      {: RESULT = new Condition(expr, body_then, Optional.of(body_else), getFl(), fleft, fright); :}
                      | 
                      IF:f expr:expr THEN body:body_then ENDIF
                      {: RESULT = new Condition(expr, body_then, Optional.empty(), getFl(), fleft, fright); :};

while_instr       ::= WHILE expr:expr DO body:body ENDWHILE
                      {: RESULT = new Tantque(expr, body, getFl(), exprleft, exprright); :};

for_instr         ::= FOR:f IDENT:id FROM expr:from TO expr:to DO body:body ENDFOR
                      {:
                        Idf idf = new Idf(id, getFl(), idleft, idright);
                        RESULT = new Pour(idf, from, to, body, getFl(), fleft, fright);
                      :};
